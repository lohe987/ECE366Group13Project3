init R1, 1


not R2
not R2
not R2
not R2
not R2
not R2


Loop:
add R1, R1
init R2, 0
add R2, R1
add R2, R1
add R2, R1
init R3, 1        #used to move from memory to memory
load R0, R3        #r0 = M[1] R0=Q
add R3, R3        #r3 = 2
store R2, R3        #M[2] = R2
init R1, 0
add R1, R0        #r1 is also Q now


Mod:
init R3, 1
add R3, R3        #r3 = 2
add R3, R3        #r3 = 4
add R3, R3        #r3 = 8
init R0, 1
add R0, R0
add R3,r0         #r3= 10
init R0,1
add R3, R0        #r3=11
not R3
not R3
slt R2, R1        #r2<r1 then R0 = 1
init R1, 0
beq R1, R0        #stuck here idk how to make it jump back to mod without 
jump R3
init R1, 1
load R1, R1        #r1 = Q again
not R1                #makes Q negative so we can use add
add R2, R1        #gets Remainder
init R0, 1
add R0, R0
store R2
not R1
not R3
jump R3
not R3
not R3
not R3


Out:
init R1, 0
load R3, R1        #r3=P
add R1, R2
init R0, 1
not R0
add R3, R0
init R2, 1
add R2, R2
add R2, R2
add R2, R2
add R2, R2
add R2, R2
add R2, R2
slt R3, R0        #r3<r0 if true R0=1
init R3, 0
beq R3, R0
jump R2
init R0, 1
jump R0


End:
init R0, 1
add R0, R0
store R2, R0




Dead:
init R0, 0
jump R0        #jumps infinitely to make it end